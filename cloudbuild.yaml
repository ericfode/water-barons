steps:
  # Step 1: Install Python dependencies
  - name: 'python:3.12-slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
          pip install uv
          uv sync
    id: 'Install Dependencies'

  # Step 2: Run unit tests
  # We use a Python image that includes the 'python' command.
  # Google provides official Python images on gcr.io/google-appengine/python
  # or you can use standard python images like 'python:3.9' (or your project's version)
  # For simplicity, let's use a readily available Python image.
  - name: 'python:3.12-slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
          uv run -- python -m unittest discover -s tests
    id: 'Run Unit Tests'
    env:
      - 'PYTHONPATH=.:${PYTHONPATH}' # Ensure modules in the current directory are discoverable

# Optional: Specify timeout for the build
timeout: '1200s' # 20 minutes

# Optional: Specify machine type
# options:
#   machineType: 'N1_HIGHCPU_8'

# Note:
# - Ensure your Cloud Build service account has necessary permissions if your tests
#   interact with other Google Cloud services (not applicable for these unit tests).
# - This configuration assumes your Python modules (`water_barons` package) are in the root
#   of your repository alongside the `tests` directory.
# - The `PYTHONPATH=.:${PYTHONPATH}` ensures that when `python -m unittest` runs,
#   it can find your `water_barons` package from the root of the checkout.
#   Alternatively, you might structure your project so tests can be run without PYTHONPATH modification
#   if the execution directory is set correctly by the test runner or image.
#   For Cloud Build, setting PYTHONPATH is a common way to handle this.
